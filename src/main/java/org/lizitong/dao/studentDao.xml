<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lizitong.dao.studentDao">
    <!--parameterType指定dao接口的形参类型，该属性的值可以是java类型的全限定名称或者mybatis定义的Java类型的别名（在官方文档中）-->
    <!--parameterType可根据接口的参数类型进行反射得到，一般可以不写-->
    <select id="selectById" parameterType="java.lang.Integer" resultType="org.lizitong.domain.student">
        select id,name,email,age from student where id = #{studentId}
    </select>
    <select id="selectById2" parameterType="int" resultType="org.lizitong.domain.student">
        select id,name,email,age from student where id = #{studentId}
    </select>

    <!--dao接口方法传参：若传入参数为一个简单类型（java基本数据类型和String，则mapper文件通过 #{任意字符} 获取这个参数值）；
                      若传入参数为多个简单类型，需使用@Param注解来命名参数，在接口方法的形参前面使用，定义参数名，在mapper文件中，使用 #{对应的参数名} 获取参数值;
                      若传入参数较多，可使用一个Java对象作为方法的参数，使用对象的属性表示参数，在mapper文件中，使用 #{属性名} 获取参数值（mybatis调用get方法获取）；
                      最复杂、最全面的参数格式，在使用java对象的基础上，使用 #{属性名,javaType=java类型的全限定名称.类型,jdbcType=数据库中列的数据类型};
                      按照位置传递参数，dao接口方法中的参数列表，从左到右，参数位置为0,1,2...，在mapper文件中，使用 #{arg0} #{arg1} 获取参数值;
                      使用map作为dao接口方法的参数，在mapper文件中，使用 #{key} 获取参数值-->
    <select id="selectByNameOrEmail" resultType="org.lizitong.domain.student">
        select id,name,email,age from student where name = #{myname} or email = #{myemail}
    </select>
    <select id="selectByOject" resultType="org.lizitong.domain.student">
        select id,name,email,age from student where name = #{name} or email = #{email}
    </select>
    <select id="selectByOject2" resultType="org.lizitong.domain.student">
        select id,name,email,age from student where name = #{name,javaType=java.lang.String,jdbcType=VARCHAR}
    </select>
    <select id="selectByPosition" resultType="org.lizitong.domain.student">
        select id,name,email,age from student where name = #{arg0} or email = #{arg1}
    </select>
</mapper>